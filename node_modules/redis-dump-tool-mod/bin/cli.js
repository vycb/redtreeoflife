/* global process, require */

var argv, doDump, dump, fs, params, path, pkg, _ref, _ref1, _ref2, _ref3, _ref4;
fs = require('fs');
path = require('path');
argv = require('optimist').argv;

pkg = JSON.parse(fs.readFileSync(path.normalize(__dirname + '/../package.json'), 'utf8'));

if(argv.help){
	console.log("" + pkg.name + " " + pkg.version + "\n\nUsage: redis-dump [OPTIONS]\n  -h <hostname>    Server hostname (default: 127.0.0.1)\n  -p <port>        Server port (default: 6379)\n  -d <db>          Database number (default: 0)\n  -f <filter>      Query filter (default: *)\n  --convert Convert from json to redis commands\n\
-i Import damp into redis\n\
-e Export data from redis, default\n\
 --help           Output this help and exit\n  --json           Output result as json\n  --pretty         Make pretty indented output (use with --json)\n\nExamples:\n  redis-dump\n  redis-dump -p 6500\n  redis-dump -f 'mydb:*' > mydb.dump.txt\n  redis-dump --json > mydb.json\n  cat mydb.json | redis-dump --convert\n\nThe output is a valid list of redis commands.\nThat means the following will work:\n  redis-dump > dump.txt      # Dump redis database\n  cat dump.txt | redis-cli   # Import redis database from generated file\n");
}else{
	params = {
		filter: !!argv.f ? argv.f : '*',
		count: !!argv.c ? argv.c : 10000,
		numcmd: !!argv.n ? argv.n : 10000,
		db: !!argv.d ? argv.d : 0,
		port: !!argv.p ? argv.p : 6379,
		host: !!argv.h ? argv.h : '127.0.0.1',
		format: argv.json ? 'json' : 'redis',
		pretty: !!argv.pretty ? argv.pretty : false
	};

	process.stdout.on('error', function(err){
		console.error(err);
	});
	if(argv.convert){
		params.convert = '';
		process.stdin.resume();
		process.stdin.on('data', function(chunk){
			return params.convert += "" + chunk;
		});
		process.stdin.on('end', function(){
			return doDump();
		});
	}

	function callback(err, result){
		if(!!err){
			return process.stderr.write("" + (!!err.message ? err.message : err) + "\n");
		}
		console.error(result);
		return process.exit(0);
	}

	if(argv.convert){
		params.convert = '';
		process.stdin.resume();
		process.stdin.on('data', function(chunk){
			return params.convert += "" + chunk;
		});
		process.stdin.on('end', function(){
			return doDump();
		});
	}
	else if(argv.i)
	{
		var Im = require('./import'),
			im = new Im(params);

		im.import(params, callback);
	}
	else{
		dump = require('./dump');

		dump(params, callback);
	}
}
